假设大家已经熟悉
- 自动化构建
- 持续集成
- build pipeline
- 自动化测试

超链接引用，将不同的内容模块化，不尝试平铺直述
假设用户可以从任何一部分开始读起，碰到需要了解的部分可以索引到其他部分
引用既有资源


本文讲述了互相集成的多个产品团队环境下的持续交付、团队组织等内容。

** 引言：持续交付和持续部署

持续交付是目前的一个挺火的概念，它所描述的软件开发，是从原始需求识别到
最终产品部署到生产环境这个过程中，需求以小批量形式在团队的各个角色间顺
畅流动，能够以较短地周期完成需求的小粒度交付。频繁的交付周期带来了更迅
速的对软件的反馈，并且在这个过程中，需求分析、产品的用户体验和交互设计、
开发、测试、运维等角色密切协作，相比于传统的瀑布式软件团队，更少浪费。

持续交付是经典的敏捷软件开发方法（例如XP，scrum）的自然延伸，以往的敏捷
方法并没有过多关注开发测试前后的活动，例如前期的需求分析，产品的用户体
验设计，产品的部署和运行维护等。随着伴随着敏捷的很多思想和原则在前后端
领域的运用和升华，以及UX、DevOps等实践的逐渐兴起，我们在持续交付这个新
的大概念下看到了敏捷方法和更多实践活动的结合和更大范围的应用。

在这里我不想过多探讨这个大的概念，而是只想就整个软件交付过程中的一段进
行探讨。假设现在需求已经明确，并且已经被划分为小的单位（例如用户故事
user story），我们着重看一看从开发人员拿到用户故事，到这些用户故事被实
际部署到生产环境上的这个过程。实际上这个过程当然是越短越好，特别是对于
急需获得用户反馈的软件产品（例如很多互联网产品）。如果我们做的每一个用
户故事，甚至是我们的每一次提交，都能够被自动地部署到生产环境中去，那么
这种频繁近乎持续地部署，对于很多软件开发团队来说，就成了值得追求的目标。

# flickr等的部署频率

如何能够让我们将新的软件修改放心地部署到生产环境中去呢？很明显，这种放
心，不仅是开发这段代码的人对自己写的代码的自信，也不是少数人的主管感觉，
必须是团队或者组织的所有成员都抱有的基于客观事实的信心。因此，如何能够
让任何新的修改都能够迅速地、有信心地被部署到生产环境，就成了一个值得解
决的问题，而这也是我们在这里想要重点讲述的问题。

** 自动化测试

如何能够保证我们写出来的代码既能准确实现我们的新功能，又能够不破坏既有
的功能？唯有靠完善的测试。而当我们开始追求频繁地甚至是持续地部署的时候，
自动化测试是唯一的能够让我们持续反复地验证软件的方法。如果一个产品具有
完备的自动化测试用例，那么任何一次对软件的修改都能够得到自动化地回归验
证，如果验证通过，我们就具备了将这些修改部署到生产环境中的信心。自动化
测试的质量直接决定了我们能否具有持续部署的信心。

关于自动化测试，有很多著作详细地讲述了自动化测试的设计、实现技巧等，这
里不再重复。我想以一个web应用为例，举例分析一下到底需要些什么样的测试
才能够让我们建立对这个产品的信心。

# pic: web example

这个简化的例子里包含了三个软件开发团队（A、B、C），这几个团队各自有自己
的一些产品，最终他们的产品组合起来给用户提供完整的体验。A团队的产品包含
了3个主要模块。其中fetcher集成了B和C的产品，定时从其中获取数据，经过分
析后存入store；frontend则会从store中获取数据，以web界面与用户进行交互。
frontend同时还和其他一些组织外的第三方服务集成（例如twitter，weibo等）。

这里不妨再对A的产品所采用的技术进行进一步限定，以方便我们之后的有些讨论。
我们不妨假定frontend和fetcher都基于java平台，都是标准的j2ee应用，store
采用mysql。frontend和fetcher都通过web api（可能是RESTful web api）于第
三方应用集成。在生产环境中，frontend和fetcher都会部署在tomcat+apache服
务器上。

我们现在可以以这个web应用为对象，考察一下如果我们在fetcher或者frontend
里修改了代码，诸如添加了新的功能，或者修复了bug，我们怎么样能使这些修改
有信心地从开发人员的机器流入到产品环境中去。虽然我们以这个简化的web产品
作为讨论对象，但是我们接下来讨论的大部分内容并不局限于web应用。

基本上，A产品的自动化测试包含如下几个方面：
- A产品自身的功能。在A产品和其第三方应用集成接口确定的情况下，A产品必
  需能够正确实现需求对其要求的功能。


** 环境(environment)

环境是一个比较宽泛的概念。这里所说的环境，特指我们的应用所部署的环境。
以一个典型的web项目为例，所涉及到的环境至少有如下几种：

首先是开发环境。开发环境是任何应用首先运行的环境，任何代码都会首先在开
发环境中首先得到一些手工的验证。自动化测试首先也会在开发环境上运行。产
品的自动化构建(automatic build)可能会在开发环境中启动一个轻量级的web
server，将自己的应用部署上去，然后自动化地运行功能测试。视产品的复杂程
度，可能还需要在开发环境中部署一个数据库，或者其他外部应用的stub。

# 解释一下自动化构建

然后是生产环境。这是最为重要的环境，配备有最高级的硬件设备，企业内所有
的应用都部署到这个环境中，协同运行为其客户提供服务。为了保证性能和稳定
性，多半会运行load balance软硬件，拥有良好的安全配置。服务器们被安置在
良好的无力环境中，并被时刻监控着运行状态。总之，这是最为复杂的环境。

在开发环境和生产环境之间有很多环境，这些环境的复杂程度位于开发和生产环
境之间。

例如QA环境。顾名思义这是给大家进行功能测试的环境，大家未必只是QA们，而
功能测试多半是手工。这个环境通常和产品环境具有一定的相似度，会部署一些
真实的第三方应用。这个QA环境有时候也会兼用作演示(showcase)环境，抑或将
演示环境独立出来。

除了这个QA环境，还有一系列用于自动化构建、自动化测试的环境。这些环境和
自动化以及持续集成紧密关联。结合一个产品的持续集成来看，大致有这么些环
境。

例如持续集成(CI, continuous integration)环境。这是持续集成服务器用来运
行产品的自动化构建的环境。CI服务器就相当于一个开发人员，自动地监控代码
库的变化，一旦有变化就自动运行自动化构建。通常这个环境和开发环境很类似，
很多时候就是CI服务器的一个agent，或者就是CI服务器本身。

staging环境。

e2e测试环境。

** TODO 云环境会让这些环境的维护变得更加简单

其实很容易看出来，不光是web项目，任何类型的软件可能都可能或多或少、或
简单或复杂地需要这些环境。


* 单个产品的持续交付

* 多个产品持续集成

* 工具论

* 

